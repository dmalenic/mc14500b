ca65 V2.18 - Ubuntu 2.19-1
Main file   : ./stick.s
Current file: ./stick.s

000000r 1               ; ===============================================================
000000r 1               ; Stick
000000r 1               ; It monitors a rotary endocer and
000000r 1               ; - if it detects the clockwise direction rotation it sends 11110000
000000r 1               ;   over the SPI interface,
000000r 1               ; - if it detects the counter-clockwise direction rotation it sends
000000r 1               ;   00001111 over the SPI interface.
000000r 1               ;
000000r 1               ; ===============================================================
000000r 1               ; Rotary encoder definition:
000000r 1               ;
000000r 1               ;     --CW  dir-->
000000r 1               ;       ___     ___
000000r 1               ; A : _|   |___|
000000r 1               ;         ___     _
000000r 1               ; B : ___|   |___|
000000r 1               ;
000000r 1               ;     <--CCW dir--
000000r 1               ;
000000r 1               ; CW  direction: ..->11->01->00->10->11->..
000000r 1               ; CCW direction: ..->11->10->00->01->11->..
000000r 1               ;
000000r 1               ; ===============================================================
000000r 1               ; SPI: Mode 1, CPOL 0, CPHA 1
000000r 1               ;             __                                    _
000000r 1               ;   CS      :   |__________________________________|
000000r 1               ;                 _   _   _   _   _   _   _   _
000000r 1               ;  CLK      : ___|1|_|2|_|3|_|4|_|5|_|6|_|7|_|8|_____
000000r 1               ;                  _______________
000000r 1               ; MISO (CW) : ____|               |__________________
000000r 1               ;                                  ________________
000000r 1               ; MISO (CCW): ____________________|                |_
000000r 1               ;
000000r 1               ; ===============================================================
000000r 1               
000000r 1               
000000r 1               .include "system.inc"
000000r 2               ;
000000r 2               ; MC14500 assembler using ca65 macros
000000r 2               ; Yaroslav Veremenko (c) 2022
000000r 2               ;
000000r 2               
000000r 2               .feature ubiquitous_idents
000000r 2               .feature string_escapes
000000r 2               .setcpu "none"
000000r 2               
000000r 2               ; 0000 0: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               ; 0001 1: LD   = Data -> RR
000000r 2               ; 0010 2: LDC  = !Data -> RR
000000r 2               ; 0011 3: AND  = RR * Data -> RR
000000r 2               ; 0100 4: ANDC = RR * !Data -> RR
000000r 2               ; 0101 5: OR   = RR + Data -> RR
000000r 2               ; 0110 6: ORC  = RR + !Data -> RR
000000r 2               ; 0111 7: XNOR = RR == Data -> RR
000000r 2               ; 1000 8: STO  = Store. RR -> Data. Write high if OEN.
000000r 2               ; 1001 9: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2               ; 1010 A: IEN  = Input enable. D -> IEN.
000000r 2               ; 1011 B: OEN  = Output enable. D -> OEN.
000000r 2               ; 1100 C: JMP  = Jump. Jump high.
000000r 2               ; 1101 D: RTN  = Return. RTN high. 1 -> Skip.
000000r 2               ; 1110 E: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2               ; 1111 F: NOPF = No change in registers. RR -> RR. FLGF high.
000000r 2               
000000r 2               .define I_NOP0 0
000000r 2               .define I_LD 1
000000r 2               .define I_LDC 2
000000r 2               .define I_AND 3
000000r 2               .define I_ANDC 4
000000r 2               .define I_OR 5
000000r 2               .define I_ORC 6
000000r 2               .define I_XNOR 7
000000r 2               .define I_STO 8
000000r 2               .define I_STOC 9
000000r 2               .define I_IEN 10
000000r 2               .define I_OEN 11
000000r 2               .define I_JMP 12
000000r 2               .define I_RTN 13
000000r 2               .define I_SKZ 14
000000r 2               .define I_NOPF 15
000000r 2               
000000r 2               RR = $8
000000r 2               IN1 = $9
000000r 2               IN2 = $A
000000r 2               IN3 = $B
000000r 2               IN4 = $C
000000r 2               IN5 = $D
000000r 2               IN6 = $E
000000r 2               IN7 = $F
000000r 2               
000000r 2               MEM0 = $0
000000r 2               MEM1 = $1
000000r 2               MEM2 = $2
000000r 2               MEM3 = $3
000000r 2               MEM4 = $4
000000r 2               MEM5 = $5
000000r 2               MEM6 = $6
000000r 2               MEM7 = $7
000000r 2               
000000r 2               OUT0 = $8
000000r 2               OUT1 = $9
000000r 2               OUT2 = $A
000000r 2               OUT3 = $B
000000r 2               OUT4 = $C
000000r 2               OUT5 = $D
000000r 2               OUT6 = $E
000000r 2               OUT7 = $F
000000r 2               
000000r 2               .macro __lit_instr op, addr
000000r 2                   .if (addr > $0F)
000000r 2                       .error "Address overflow"
000000r 2                   .endif
000000r 2                   .byte <(((op) << 4) | ((<(addr)) & $0F))
000000r 2               .endmacro
000000r 2               
000000r 2               .macro __instr op, addr
000000r 2                   __lit_instr op, addr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro nop0 addr    ; 0000: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               .ifblank    addr
000000r 2                   __instr I_NOP0, 0
000000r 2               .else
000000r 2                   __instr I_NOP0, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro ld addr      ; 0001: LD
000000r 2                   __instr I_LD, addr
000000r 2               .endmacro
000000r 2               .macro ldc addr     ; 0010: LDC
000000r 2                   __instr I_LDC, addr
000000r 2               .endmacro
000000r 2               .macro and addr     ; 0011: AND
000000r 2                   __instr I_AND, addr
000000r 2               .endmacro
000000r 2               .macro andc addr    ; 0100: ANDC
000000r 2                   __instr I_ANDC, addr
000000r 2               .endmacro
000000r 2               .macro or addr      ; 0101: OR
000000r 2                   __instr I_OR, addr
000000r 2               .endmacro
000000r 2               .macro orc addr     ; 0110: ORC
000000r 2                   __instr I_ORC, addr
000000r 2               .endmacro
000000r 2               .macro xnor addr    ; 0111: XNOR
000000r 2                   __instr I_XNOR, addr
000000r 2               .endmacro
000000r 2               .macro sto addr     ; 1000: STO  = Store. RR -> Data. Write high if OEN.
000000r 2                   __instr I_STO, addr
000000r 2               .endmacro
000000r 2               .macro stoc addr    ; 1001: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2                   __instr I_STOC, addr
000000r 2               .endmacro
000000r 2               .macro ien addr     ; 1010: IEN  = Input enable. D -> IEN.
000000r 2                   __instr I_IEN, addr
000000r 2               .endmacro
000000r 2               .macro oen addr     ; 1011: OEN  = Output enable. D -> OEN.
000000r 2                   __instr I_OEN, addr
000000r 2               .endmacro
000000r 2               .macro jmp addr     ; 1100: JMP  = Jump. Jump high.
000000r 2               .ifblank   addr
000000r 2                   __instr I_JMP, 0
000000r 2               .else
000000r 2                   __instr I_JMP, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro rtn          ; 1101: RTN  = Return. RTN high. 1 -> Skip.
000000r 2                   __instr I_RTN, 0
000000r 2               .endmacro
000000r 2               .macro skz          ; 1110: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2                   __instr I_SKZ, 0
000000r 2               .endmacro
000000r 2               .macro nopf addr    ; 1111: NOPF = No change
000000r 2               .ifblank   addr
000000r 2                   __instr I_NOPF, 0
000000r 2               .else
000000r 2                   __instr I_NOPF, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               
000000r 1               TMP     = MEM0
000000r 1               PREV_A  = MEM1
000000r 1               PREV_B  = MEM2
000000r 1               NEW_A   = MEM3
000000r 1               NEW_B   = MEM4
000000r 1               DIR_CW  = MEM5
000000r 1               DIR_CCW = MEM6
000000r 1               
000000r 1               PIN_A   = IN1
000000r 1               PIN_B   = IN2
000000r 1               
000000r 1               PIN_CS  = OUT1
000000r 1               PIN_CLK = OUT2
000000r 1               PIN_MOSI= OUT3
000000r 1               
000000r 1               
000000r 1               .macro spi_send_dir_bit dir_bit
000000r 1                       orc     RR
000000r 1                       sto     PIN_CLK
000000r 1                       ld      dir_bit
000000r 1                       sto     PIN_MOSI
000000r 1                       orc     RR
000000r 1                       stoc    PIN_CLK
000000r 1                       nop0
000000r 1                       nop0
000000r 1               .endmacro
000000r 1               
000000r 1               .macro spi_send_byte
000000r 1               
000000r 1                       stoc    PIN_CLK
000000r 1                       stoc    PIN_MOSI
000000r 1               
000000r 1                       ; set CS to low
000000r 1                       stoc    PIN_CS
000000r 1               
000000r 1                       nop0
000000r 1               
000000r 1                       ; send 8 bits
000000r 1                       spi_send_dir_bit DIR_CW
000000r 1                       spi_send_dir_bit DIR_CW
000000r 1                       spi_send_dir_bit DIR_CW
000000r 1                       spi_send_dir_bit DIR_CW
000000r 1                       spi_send_dir_bit DIR_CCW
000000r 1                       spi_send_dir_bit DIR_CCW
000000r 1                       spi_send_dir_bit DIR_CCW
000000r 1                       spi_send_dir_bit DIR_CCW
000000r 1               
000000r 1                       ; set MOSI low and CS high, RR is 1
000000r 1                       nop0
000000r 1                       stoc    PIN_MOSI
000000r 1                       nop0
000000r 1                       sto     PIN_CS
000000r 1               .endmacro
000000r 1               
000000r 1               
000000r 1               .segment "CODE"
000000r 1               
000000r 1               ; ===============================================================
000000r 1               ; Initialize
000000r 1               ; ===============================================================
000000r 1               
000000r 1  68                   orc     RR
000001r 1  A8                   ien     RR
000002r 1  B8                   oen     RR
000003r 1               
000003r 1               ; ===============================================================
000003r 1               ; Make sure SPI interface is in idle state
000003r 1               ; ===============================================================
000003r 1               
000003r 1  89                   sto     PIN_CS
000004r 1               
000004r 1               ; ===============================================================
000004r 1               ; Load new rotary encoder state
000004r 1               ; ===============================================================
000004r 1               
000004r 1                       ; read rotary encoder state and store it for the rest of cycle
000004r 1  19                   ld      PIN_A
000005r 1  83                   sto     NEW_A
000006r 1  1A                   ld      PIN_B
000007r 1  84                   sto     NEW_B
000008r 1               
000008r 1               ; ===============================================================
000008r 1               ; If no change on inputs, shorcut the cycle
000008r 1               ; ===============================================================
000008r 1               
000008r 1  11                   ld      PREV_A
000009r 1  73                   xnor    NEW_A   ; RR=1 if NEW_A==PREV_A
00000Ar 1  80                   sto     TMP
00000Br 1  12                   ld      PREV_B
00000Cr 1  74                   xnor    NEW_B   ; RR=1 if NEW_B==PREV_B
00000Dr 1  30                   and     TMP     ; RR=1 if NEW_A==PREV_A and NEW_B==PREV_B
00000Er 1  E0                   skz             ; if RR==0 there was a rotation
00000Fr 1  C0                   jmp
000010r 1               
000010r 1  85                   sto     DIR_CW  ; assume no CW rotation
000011r 1  86                   sto     DIR_CCW ; assume no CCW rotation
000012r 1               
000012r 1               ; ===============================================================
000012r 1               ; Try to prove CW direction:
000012r 1               ; 11->01 or 01->00 or 00->10 or 10->11
000012r 1               ; ===============================================================
000012r 1               
000012r 1                       ; 11->01
000012r 1  11                   ld      PREV_A
000013r 1  32                   and     PREV_B
000014r 1  43                   andc    NEW_A
000015r 1  34                   and     NEW_B
000016r 1  E0                   skz
000017r 1  85                   sto     DIR_CW
000018r 1               
000018r 1                       ; 01->00
000018r 1  21                   ldc     PREV_A
000019r 1  32                   and     PREV_B
00001Ar 1  43                   andc    NEW_A
00001Br 1  44                   andc    NEW_B
00001Cr 1  E0                   skz
00001Dr 1  85                   sto     DIR_CW
00001Er 1               
00001Er 1                       ; 00->10
00001Er 1  21                   ldc     PREV_A
00001Fr 1  42                   andc    PREV_B
000020r 1  33                   and     NEW_A
000021r 1  44                   andc    NEW_B
000022r 1  E0                   skz
000023r 1  85                   sto     DIR_CW
000024r 1               
000024r 1                       ; 10->11
000024r 1  11                   ld      PREV_A
000025r 1  42                   andc    PREV_B
000026r 1  33                   and     NEW_A
000027r 1  34                   and     NEW_B
000028r 1  E0                   skz
000029r 1  85                   sto     DIR_CW
00002Ar 1               
00002Ar 1               ; ===============================================================
00002Ar 1               ; Try to prove CCW direction:
00002Ar 1               ; 11->10 or 10->00 or 00->01 or 01->11
00002Ar 1               ; ===============================================================
00002Ar 1               
00002Ar 1                       ; 11->10
00002Ar 1  11                   ld      PREV_A
00002Br 1  32                   and     PREV_B
00002Cr 1  33                   and     NEW_A
00002Dr 1  44                   andc    NEW_B
00002Er 1  E0                   skz
00002Fr 1  86                   sto     DIR_CCW
000030r 1               
000030r 1                       ; 10->00
000030r 1  11                   ld      PREV_A
000031r 1  42                   andc    PREV_B
000032r 1  43                   andc    NEW_A
000033r 1  44                   andc    NEW_B
000034r 1  E0                   skz
000035r 1  86                   sto     DIR_CCW
000036r 1               
000036r 1                       ; 00->01
000036r 1  21                   ldc     PREV_A
000037r 1  42                   andc    PREV_B
000038r 1  43                   andc    NEW_A
000039r 1  34                   and     NEW_B
00003Ar 1  E0                   skz
00003Br 1  86                   sto     DIR_CCW
00003Cr 1               
00003Cr 1                       ; 01->11
00003Cr 1  21                   ldc     PREV_A
00003Dr 1  32                   and     PREV_B
00003Er 1  33                   and     NEW_A
00003Fr 1  34                   and     NEW_B
000040r 1  E0                   skz
000041r 1  86                   sto     DIR_CCW
000042r 1               
000042r 1               ; ===============================================================
000042r 1               ; Preserve PIN_A, PIN_B in PREV_A, PREV_B
000042r 1               ; ===============================================================
000042r 1               
000042r 1  13                   ld      NEW_A
000043r 1  81                   sto     PREV_A
000044r 1  14                   ld      NEW_B
000045r 1  82                   sto     PREV_B
000046r 1               
000046r 1               ; ===============================================================
000046r 1               ; Send the SPI message if either CW or CCW rotation is detected
000046r 1               ; but not if both i.e. ignore ambiguous input.
000046r 1               ; ===============================================================
000046r 1               
000046r 1                       ; check if DIR_CW == DIR_CCW, if so, it is either no rotation
000046r 1                       ; or an ambiguous situation so do not send a command
000046r 1  15                   ld      DIR_CW
000047r 1  76                   xnor    DIR_CCW
000048r 1  E0                   skz
000049r 1  C0                   jmp
00004Ar 1               
00004Ar 1  68                   orc     RR
00004Br 1  B8                   oen     RR
00004Cr 1               
00004Cr 1  9A 9B 99 00          spi_send_byte
000050r 1  68 8A 15 8B  
000054r 1  68 9A 00 00  
000058r 1  68 8A 15 8B  
00005Cr 1  68 9A 00 00  
000060r 1  68 8A 15 8B  
000064r 1  68 9A 00 00  
000068r 1  68 8A 15 8B  
00006Cr 1  68 9A 00 00  
000070r 1  68 8A 16 8B  
000074r 1  68 9A 00 00  
000078r 1  68 8A 16 8B  
00007Cr 1  68 9A 00 00  
000080r 1  68 8A 16 8B  
000084r 1  68 9A 00 00  
000088r 1  68 8A 16 8B  
00008Cr 1  68 9A 00 00  
000090r 1  00 9B 00 89  
000094r 1               
000094r 1               ; ===============================================================
000094r 1               ; Iddle the rest of a cycle - the rudder program is almost
000094r 1               ; 256 instructions long and the stick program can not send
000094r 1               ; commands faster than the rudder program can execute them.
000094r 1               ; ===============================================================
000094r 1               
000094r 1               
000094r 1               
