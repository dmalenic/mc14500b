ca65 V2.18 - Ubuntu 2.19-1
Main file   : ./add.s
Current file: ./add.s

000000r 1               ;
000000r 1               ; Adder
000000r 1               ; Yaroslav Veremenko, December 11, 2022
000000r 1               ;
000000r 1               ; Set first 7 bit value using input switches (0-6), and press reset.
000000r 1               ; First value will be stored in memory.
000000r 1               ; Set second value.
000000r 1               ; 8 bit output will be placed in the output register
000000r 1               ;
000000r 1               ; Bit 0 of memory is used as temporary storage
000000r 1               ;
000000r 1               
000000r 1               .include "system.inc"
000000r 2               ;
000000r 2               ; MC14500 assembler using ca65 macros
000000r 2               ; Yaroslav Veremenko (c) 2022
000000r 2               ;
000000r 2               
000000r 2               .feature ubiquitous_idents
000000r 2               .feature string_escapes
000000r 2               .setcpu "none"
000000r 2               
000000r 2               ; 0000 0: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               ; 0001 1: LD   = Data -> RR
000000r 2               ; 0010 2: LDC  = !Data -> RR
000000r 2               ; 0011 3: AND  = RR * Data -> RR
000000r 2               ; 0100 4: ANDC = RR * !Data -> RR
000000r 2               ; 0101 5: OR   = RR + Data -> RR
000000r 2               ; 0110 6: ORC  = RR + !Data -> RR
000000r 2               ; 0111 7: XNOR = RR == Data -> RR
000000r 2               ; 1000 8: STO  = Store. RR -> Data. Write high if OEN.
000000r 2               ; 1001 9: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2               ; 1010 A: IEN  = Input enable. D -> IEN.
000000r 2               ; 1011 B: OEN  = Output enable. D -> OEN.
000000r 2               ; 1100 C: JMP  = Jump. Jump high.
000000r 2               ; 1101 D: RTN  = Return. RTN high. 1 -> Skip.
000000r 2               ; 1110 E: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2               ; 1111 F: NOPF = No change in registers. RR -> RR. FLGF high.
000000r 2               
000000r 2               .define I_NOP0 0
000000r 2               .define I_LD 1
000000r 2               .define I_LDC 2
000000r 2               .define I_AND 3
000000r 2               .define I_ANDC 4
000000r 2               .define I_OR 5
000000r 2               .define I_ORC 6
000000r 2               .define I_XNOR 7
000000r 2               .define I_STO 8
000000r 2               .define I_STOC 9
000000r 2               .define I_IEN 10
000000r 2               .define I_OEN 11
000000r 2               .define I_JMP 12
000000r 2               .define I_RTN 13
000000r 2               .define I_SKZ 14
000000r 2               .define I_NOPF 15
000000r 2               
000000r 2               RR = $8
000000r 2               IN1 = $9
000000r 2               IN2 = $A
000000r 2               IN3 = $B
000000r 2               IN4 = $C
000000r 2               IN5 = $D
000000r 2               IN6 = $E
000000r 2               IN7 = $F
000000r 2               
000000r 2               MEM0 = $0
000000r 2               MEM1 = $1
000000r 2               MEM2 = $2
000000r 2               MEM3 = $3
000000r 2               MEM4 = $4
000000r 2               MEM5 = $5
000000r 2               MEM6 = $6
000000r 2               MEM7 = $7
000000r 2               
000000r 2               OUT0 = $8
000000r 2               OUT1 = $9
000000r 2               OUT2 = $A
000000r 2               OUT3 = $B
000000r 2               OUT4 = $C
000000r 2               OUT5 = $D
000000r 2               OUT6 = $E
000000r 2               OUT7 = $F
000000r 2               
000000r 2               .macro __lit_instr op, addr
000000r 2                   .if (addr > $0F)
000000r 2                       .error "Address overflow"
000000r 2                   .endif
000000r 2                   .byte <(((op) << 4) | ((<(addr)) & $0F))
000000r 2               .endmacro
000000r 2               
000000r 2               .macro __instr op, addr
000000r 2                   __lit_instr op, addr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro nop0 addr    ; 0000: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               .ifblank    addr
000000r 2                   __instr I_NOP0, 0
000000r 2               .else
000000r 2                   __instr I_NOP0, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro ld addr      ; 0001: LD
000000r 2                   __instr I_LD, addr
000000r 2               .endmacro
000000r 2               .macro ldc addr     ; 0010: LDC
000000r 2                   __instr I_LDC, addr
000000r 2               .endmacro
000000r 2               .macro and addr     ; 0011: AND
000000r 2                   __instr I_AND, addr
000000r 2               .endmacro
000000r 2               .macro andc addr    ; 0100: ANDC
000000r 2                   __instr I_ANDC, addr
000000r 2               .endmacro
000000r 2               .macro or addr      ; 0101: OR
000000r 2                   __instr I_OR, addr
000000r 2               .endmacro
000000r 2               .macro orc addr     ; 0110: ORC
000000r 2                   __instr I_ORC, addr
000000r 2               .endmacro
000000r 2               .macro xnor addr    ; 0111: XNOR
000000r 2                   __instr I_XNOR, addr
000000r 2               .endmacro
000000r 2               .macro sto addr     ; 1000: STO  = Store. RR -> Data. Write high if OEN.
000000r 2                   __instr I_STO, addr
000000r 2               .endmacro
000000r 2               .macro stoc addr    ; 1001: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2                   __instr I_STOC, addr
000000r 2               .endmacro
000000r 2               .macro ien addr     ; 1010: IEN  = Input enable. D -> IEN.
000000r 2                   __instr I_IEN, addr
000000r 2               .endmacro
000000r 2               .macro oen addr     ; 1011: OEN  = Output enable. D -> OEN.
000000r 2                   __instr I_OEN, addr
000000r 2               .endmacro
000000r 2               .macro jmp addr     ; 1100: JMP  = Jump. Jump high.
000000r 2               .ifblank   addr
000000r 2                   __instr I_JMP, 0
000000r 2               .else
000000r 2                   __instr I_JMP, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro rtn          ; 1101: RTN  = Return. RTN high. 1 -> Skip.
000000r 2                   __instr I_RTN, 0
000000r 2               .endmacro
000000r 2               .macro skz          ; 1110: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2                   __instr I_SKZ, 0
000000r 2               .endmacro
000000r 2               .macro nopf addr    ; 1111: NOPF = No change
000000r 2               .ifblank   addr
000000r 2                   __instr I_NOPF, 0
000000r 2               .else
000000r 2                   __instr I_NOPF, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               CARRY = MEM0
000000r 1               
000000r 1               .segment "CODE"
000000r 1                   ; *** init code to enable IEN ***
000000r 1  80               sto     CARRY ; presever RR
000001r 1  68               orc     RR    ; 1 -> RR
000002r 1  A8               ien     RR    ; enable input
000003r 1  10               ld      CARRY ; restore RR
000004r 1               
000004r 1                   ; *** run once on startup ***
000004r 1  28               ldc     RR     ; RR is 0 at reset
000005r 1  B8               oen     RR     ; enable init branch
000006r 1                   ; load input into memory
000006r 1  19 81 1A 82  .repeat 7,I
00000Ar 1  1B 83 1C 84  
00000Er 1  1D 85 1E 86  
000012r 1  1F 87        
000014r 1                   ld      IN1+I
000014r 1                   sto     MEM1+I
000014r 1               .endrepeat
000014r 1               
000014r 1                   ; *** main loop ***
000014r 1  68               orc     RR    ; 1 -> RR
000015r 1  B8               oen     RR    ; force enable main loop
000016r 1               
000016r 1  90               stoc    CARRY ; reset carry
000017r 1               
000017r 1  10 71 79 89  .repeat 7,I
00001Br 1  19 50 31 A9  
00001Fr 1  50 80 68 A8  
000023r 1  10 72 7A 8A  
000027r 1  1A 50 32 AA  
00002Br 1  50 80 68 A8  
00002Fr 1  10 73 7B 8B  
000033r 1  1B 50 33 AB  
000037r 1  50 80 68 A8  
00003Br 1  10 74 7C 8C  
00003Fr 1  1C 50 34 AC  
000043r 1  50 80 68 A8  
000047r 1  10 75 7D 8D  
00004Br 1  1D 50 35 AD  
00004Fr 1  50 80 68 A8  
000053r 1  10 76 7E 8E  
000057r 1  1E 50 36 AE  
00005Br 1  50 80 68 A8  
00005Fr 1  10 77 7F 8F  
000063r 1  1F 50 37 AF  
000067r 1  50 80 68 A8  
00006Br 1                   ; alghorithm from page 87 of handbook
00006Br 1                   ld      CARRY
00006Br 1                   xnor    MEM1+I
00006Br 1                   xnor    IN1+I
00006Br 1                   sto     OUT1+I
00006Br 1               
00006Br 1                   ld      IN1+I
00006Br 1                   or      CARRY
00006Br 1                   and     MEM1+I
00006Br 1                   ien     IN1+I
00006Br 1                   or      CARRY
00006Br 1                   sto     CARRY
00006Br 1               
00006Br 1                   orc     RR
00006Br 1                   ien     RR
00006Br 1               .endrepeat
00006Br 1               
00006Br 1  68               orc     RR    ; 1 -> RR, so init code won't run on the next loop
00006Cr 1               
00006Cr 1               
00006Cr 1               
