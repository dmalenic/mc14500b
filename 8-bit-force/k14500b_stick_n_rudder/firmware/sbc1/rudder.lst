ca65 V2.18 - Ubuntu 2.19-1
Main file   : ./rudder.s
Current file: ./rudder.s

000000r 1               ; ===============================================================
000000r 1               ; Rudder:
000000r 1               ; - It rotates the stepper motor clocwise when it receives the
000000r 1               ;   byte 0b11110000 over SPI interface.
000000r 1               ; - It rotates the stepper motor counter-clocwise when it receives
000000r 1               ;   the byte 0b00001111 over SPI interface.
000000r 1               ;
000000r 1               ; ===============================================================
000000r 1               ; SPI: Mode 1, CPOL 0, CPHA 1
000000r 1               ;             __                                    _
000000r 1               ;   CS      :   |__________________________________|
000000r 1               ;                 _   _   _   _   _   _   _   _
000000r 1               ;  CLK      : ___|1|_|2|_|3|_|4|_|5|_|6|_|7|_|8|_____
000000r 1               ;                  _______________
000000r 1               ; MISO (CW) : ____|               |__________________
000000r 1               ;                                  ________________
000000r 1               ; MISO (CCW): ____________________|                |_
000000r 1               ;
000000r 1               ; ===============================================================
000000r 1               ; Unipolar Stepper Full Drive CW
000000r 1               ;      ___     ___     __
000000r 1               ; A : |   |___|   |___|
000000r 1               ;        ___     ___
000000r 1               ; B : __|   |___|   |___|
000000r 1               ;          ___     ___
000000r 1               ; C : |___|   |___|   |__
000000r 1               ;     __     ___     ___
000000r 1               ; D :   |___|   |___|   |
000000r 1               ;     1 2 3 4 5 6 7 8 9 A
000000r 1               ; ===============================================================
000000r 1               ; Unipolar Stepper Full Drive CCW
000000r 1               ;     __     ___     ___
000000r 1               ; A :   |___|   |___|   |
000000r 1               ;          ___     ___
000000r 1               ; B : |___|   |___|   |__
000000r 1               ;        ___     ___
000000r 1               ; C : __|   |___|   |___|
000000r 1               ;      ___     ___     __
000000r 1               ; D : |   |___|   |___|
000000r 1               ;     1 2 3 4 5 6 7 8 9 A
000000r 1               ; ===============================================================
000000r 1               
000000r 1               
000000r 1               
000000r 1               .include "system.inc"
000000r 2               ;
000000r 2               ; MC14500 assembler using ca65 macros
000000r 2               ; Yaroslav Veremenko (c) 2022
000000r 2               ;
000000r 2               
000000r 2               .feature ubiquitous_idents
000000r 2               .feature string_escapes
000000r 2               .setcpu "none"
000000r 2               
000000r 2               ; 0000 0: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               ; 0001 1: LD   = Data -> RR
000000r 2               ; 0010 2: LDC  = !Data -> RR
000000r 2               ; 0011 3: AND  = RR * Data -> RR
000000r 2               ; 0100 4: ANDC = RR * !Data -> RR
000000r 2               ; 0101 5: OR   = RR + Data -> RR
000000r 2               ; 0110 6: ORC  = RR + !Data -> RR
000000r 2               ; 0111 7: XNOR = RR == Data -> RR
000000r 2               ; 1000 8: STO  = Store. RR -> Data. Write high if OEN.
000000r 2               ; 1001 9: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2               ; 1010 A: IEN  = Input enable. D -> IEN.
000000r 2               ; 1011 B: OEN  = Output enable. D -> OEN.
000000r 2               ; 1100 C: JMP  = Jump. Jump high.
000000r 2               ; 1101 D: RTN  = Return. RTN high. 1 -> Skip.
000000r 2               ; 1110 E: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2               ; 1111 F: NOPF = No change in registers. RR -> RR. FLGF high.
000000r 2               
000000r 2               .define I_NOP0 0
000000r 2               .define I_LD 1
000000r 2               .define I_LDC 2
000000r 2               .define I_AND 3
000000r 2               .define I_ANDC 4
000000r 2               .define I_OR 5
000000r 2               .define I_ORC 6
000000r 2               .define I_XNOR 7
000000r 2               .define I_STO 8
000000r 2               .define I_STOC 9
000000r 2               .define I_IEN 10
000000r 2               .define I_OEN 11
000000r 2               .define I_JMP 12
000000r 2               .define I_RTN 13
000000r 2               .define I_SKZ 14
000000r 2               .define I_NOPF 15
000000r 2               
000000r 2               RR = $8
000000r 2               IN1 = $9
000000r 2               IN2 = $A
000000r 2               IN3 = $B
000000r 2               IN4 = $C
000000r 2               IN5 = $D
000000r 2               IN6 = $E
000000r 2               IN7 = $F
000000r 2               
000000r 2               MEM0 = $0
000000r 2               MEM1 = $1
000000r 2               MEM2 = $2
000000r 2               MEM3 = $3
000000r 2               MEM4 = $4
000000r 2               MEM5 = $5
000000r 2               MEM6 = $6
000000r 2               MEM7 = $7
000000r 2               
000000r 2               OUT0 = $8
000000r 2               OUT1 = $9
000000r 2               OUT2 = $A
000000r 2               OUT3 = $B
000000r 2               OUT4 = $C
000000r 2               OUT5 = $D
000000r 2               OUT6 = $E
000000r 2               OUT7 = $F
000000r 2               
000000r 2               .macro __lit_instr op, addr
000000r 2                   .if (addr > $0F)
000000r 2                       .error "Address overflow"
000000r 2                   .endif
000000r 2                   .byte <(((op) << 4) | ((<(addr)) & $0F))
000000r 2               .endmacro
000000r 2               
000000r 2               .macro __instr op, addr
000000r 2                   __lit_instr op, addr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro nop0 addr    ; 0000: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               .ifblank    addr
000000r 2                   __instr I_NOP0, 0
000000r 2               .else
000000r 2                   __instr I_NOP0, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro ld addr      ; 0001: LD
000000r 2                   __instr I_LD, addr
000000r 2               .endmacro
000000r 2               .macro ldc addr     ; 0010: LDC
000000r 2                   __instr I_LDC, addr
000000r 2               .endmacro
000000r 2               .macro and addr     ; 0011: AND
000000r 2                   __instr I_AND, addr
000000r 2               .endmacro
000000r 2               .macro andc addr    ; 0100: ANDC
000000r 2                   __instr I_ANDC, addr
000000r 2               .endmacro
000000r 2               .macro or addr      ; 0101: OR
000000r 2                   __instr I_OR, addr
000000r 2               .endmacro
000000r 2               .macro orc addr     ; 0110: ORC
000000r 2                   __instr I_ORC, addr
000000r 2               .endmacro
000000r 2               .macro xnor addr    ; 0111: XNOR
000000r 2                   __instr I_XNOR, addr
000000r 2               .endmacro
000000r 2               .macro sto addr     ; 1000: STO  = Store. RR -> Data. Write high if OEN.
000000r 2                   __instr I_STO, addr
000000r 2               .endmacro
000000r 2               .macro stoc addr    ; 1001: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2                   __instr I_STOC, addr
000000r 2               .endmacro
000000r 2               .macro ien addr     ; 1010: IEN  = Input enable. D -> IEN.
000000r 2                   __instr I_IEN, addr
000000r 2               .endmacro
000000r 2               .macro oen addr     ; 1011: OEN  = Output enable. D -> OEN.
000000r 2                   __instr I_OEN, addr
000000r 2               .endmacro
000000r 2               .macro jmp addr     ; 1100: JMP  = Jump. Jump high.
000000r 2               .ifblank   addr
000000r 2                   __instr I_JMP, 0
000000r 2               .else
000000r 2                   __instr I_JMP, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro rtn          ; 1101: RTN  = Return. RTN high. 1 -> Skip.
000000r 2                   __instr I_RTN, 0
000000r 2               .endmacro
000000r 2               .macro skz          ; 1110: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2                   __instr I_SKZ, 0
000000r 2               .endmacro
000000r 2               .macro nopf addr    ; 1111: NOPF = No change
000000r 2               .ifblank   addr
000000r 2                   __instr I_NOPF, 0
000000r 2               .else
000000r 2                   __instr I_NOPF, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               
000000r 1               DIR_CW  = MEM0
000000r 1               DIR_CCW = MEM1
000000r 1               
000000r 1               PIN_CS  = IN1
000000r 1               PIN_CLK = IN2
000000r 1               PIN_MOSI= IN3
000000r 1               
000000r 1               PIN_A   = OUT0
000000r 1               PIN_B   = OUT1
000000r 1               PIN_C   = OUT2
000000r 1               PIN_D   = OUT3
000000r 1               
000000r 1               LOOP_CS = 1
000000r 1               
000000r 1               DELAY   = 5
000000r 1               
000000r 1               
000000r 1               .macro delay t
000000r 1                       .repeat t, I
000000r 1                       nop0
000000r 1                       .endrepeat
000000r 1               .endmacro
000000r 1               
000000r 1               
000000r 1               .macro pulse_cw
000000r 1               ;       ___     ___     ___
000000r 1               ; A : _|   |___|   |___|   |_______
000000r 1               ;         ___     ___     ___
000000r 1               ; B : ___|   |___|   |___|   |_____
000000r 1               ;           ___     ___     ___
000000r 1               ; C : _____|   |___|   |___|   |___
000000r 1               ;             ___     ___     ___
000000r 1               ; D : _______|   |___|   |___|   |_
000000r 1               ;      1 2 3 4 5 6 7 8 9 A B C D E
000000r 1                       ; assume RR is 1
000000r 1                       ; 1
000000r 1                       sto     PIN_A
000000r 1                       delay   (DELAY+1)
000000r 1                       ; 2
000000r 1                       sto     PIN_B
000000r 1                       delay   DELAY
000000r 1                       ; 3
000000r 1                       stoc    PIN_A
000000r 1                       sto     PIN_C
000000r 1                       delay   DELAY
000000r 1                       ; 4
000000r 1                       stoc    PIN_B
000000r 1                       sto     PIN_D
000000r 1                       delay   DELAY
000000r 1                       ; 5
000000r 1                       stoc    PIN_C
000000r 1                       sto     PIN_A
000000r 1                       delay   DELAY
000000r 1                       ; 6
000000r 1                       stoc    PIN_D
000000r 1                       sto     PIN_B
000000r 1                       delay   DELAY
000000r 1                       ; 7
000000r 1                       stoc    PIN_A
000000r 1                       sto     PIN_C
000000r 1                       delay   DELAY
000000r 1                       ; 8
000000r 1                       stoc    PIN_B
000000r 1                       sto     PIN_D
000000r 1                       delay   DELAY
000000r 1                       ; 9
000000r 1                       stoc    PIN_C
000000r 1                       sto     PIN_A
000000r 1                       delay   DELAY
000000r 1                       ; A
000000r 1                       stoc    PIN_D
000000r 1                       sto     PIN_B
000000r 1                       delay   DELAY
000000r 1                       ; B
000000r 1                       stoc    PIN_A
000000r 1                       sto     PIN_C
000000r 1                       delay   DELAY
000000r 1                       ; C
000000r 1                       stoc    PIN_B
000000r 1                       sto     PIN_D
000000r 1                       delay   DELAY
000000r 1                       ; D
000000r 1                       stoc    PIN_C
000000r 1                       delay   (DELAY+1)
000000r 1                       ; E
000000r 1                       stoc    PIN_D
000000r 1               .endmacro
000000r 1               
000000r 1               
000000r 1               .macro pulse_ccw
000000r 1               ;             ___     ___     ___
000000r 1               ; A : _______|   |___|   |___|   |_
000000r 1               ;           ___     ___     ___
000000r 1               ; B : _____|   |___|   |___|   |___
000000r 1               ;         ___     ___     ___
000000r 1               ; C : ___|   |___|   |___|   |_____
000000r 1               ;       ___     ___     ___
000000r 1               ; D : _|   |___|   |___|   |_______
000000r 1               ;      1 2 3 4 5 6 7 8 9 A B C D E
000000r 1                       ; assume RR is 1
000000r 1                       ; 1
000000r 1                       sto     PIN_D
000000r 1                       delay   (DELAY+1)
000000r 1                       ; 2
000000r 1                       sto     PIN_C
000000r 1                       delay   DELAY
000000r 1                       ; 3
000000r 1                       stoc    PIN_D
000000r 1                       sto     PIN_B
000000r 1                       delay   DELAY
000000r 1                       ; 4
000000r 1                       stoc    PIN_C
000000r 1                       sto     PIN_A
000000r 1                       delay   DELAY
000000r 1                       ; 5
000000r 1                       stoc    PIN_B
000000r 1                       sto     PIN_D
000000r 1                       delay   DELAY
000000r 1                       ; 6
000000r 1                       stoc    PIN_A
000000r 1                       sto     PIN_C
000000r 1                       delay   DELAY
000000r 1                       ; 7
000000r 1                       stoc    PIN_D
000000r 1                       sto     PIN_B
000000r 1                       delay   DELAY
000000r 1                       ; 8
000000r 1                       stoc    PIN_C
000000r 1                       sto     PIN_A
000000r 1                       delay   DELAY
000000r 1                       ; 9
000000r 1                       stoc    PIN_B
000000r 1                       sto     PIN_D
000000r 1                       delay   DELAY
000000r 1                       ; A
000000r 1                       stoc    PIN_A
000000r 1                       sto     PIN_C
000000r 1                       delay   DELAY
000000r 1                       ; B
000000r 1                       stoc    PIN_D
000000r 1                       sto     PIN_B
000000r 1                       delay   DELAY
000000r 1                       ; C
000000r 1                       stoc    PIN_C
000000r 1                       sto     PIN_A
000000r 1                       delay   DELAY
000000r 1                       ; D
000000r 1                       stoc    PIN_B
000000r 1                       delay   (DELAY+1)
000000r 1                       ; E
000000r 1                       stoc    PIN_A
000000r 1               .endmacro
000000r 1               
000000r 1               
000000r 1               .segment "CODE"
000000r 1               
000000r 1               ; ===============================================================
000000r 1               ; Initialize
000000r 1               ; ===============================================================
000000r 1               
000000r 1  68                   orc     RR
000001r 1  A8                   ien     RR
000002r 1  B8                   oen     RR
000003r 1               
000003r 1               ; ===============================================================
000003r 1               ; Perform the CSP read. This is not the most generic implemetation
000003r 1               ; but it will be good enough for the purpose.
000003r 1               ; 1. Wait for CS to get low
000003r 1               ; 2. Wait for approx. 2 bytes to be transmitted and then read DIR_CW.
000003r 1               ; 3. Wait for approx. 4 bytes to be transmitted and then read DIR_CCW.
000003r 1               ; ===============================================================
000003r 1               
000003r 1  19                   ld      PIN_CS
000004r 1  E0                   skz
000005r 1  C0                   jmp             ; CS is high loop again
000006r 1  00 00 00 00          .repeat 12,I
00000Ar 1  00 00 00 00  
00000Er 1  00 00 00 00  
000012r 1                       nop0
000012r 1                       .endrepeat
000012r 1  1B                   ld      PIN_MOSI
000013r 1  80                   sto     DIR_CW
000014r 1  00 00 00 00          .repeat 40,I
000018r 1  00 00 00 00  
00001Cr 1  00 00 00 00  
000020r 1  00 00 00 00  
000024r 1  00 00 00 00  
000028r 1  00 00 00 00  
00002Cr 1  00 00 00 00  
000030r 1  00 00 00 00  
000034r 1  00 00 00 00  
000038r 1  00 00 00 00  
00003Cr 1                       nop0
00003Cr 1                       .endrepeat
00003Cr 1  1B                   ld      PIN_MOSI
00003Dr 1  81                   sto     DIR_CCW
00003Er 1                       ; ignore the remaining of SPI transmittion
00003Er 1               
00003Er 1               ; ===============================================================
00003Er 1               ; If DIR_CW output the required Stepper Pattern
00003Er 1               ; ===============================================================
00003Er 1               
00003Er 1  B0                   oen     DIR_CW
00003Fr 1  68                   orc     RR
000040r 1  88 00 00 00          pulse_cw
000044r 1  00 00 00 89  
000048r 1  00 00 00 00  
00004Cr 1  00 98 8A 00  
000050r 1  00 00 00 00  
000054r 1  99 8B 00 00  
000058r 1  00 00 00 9A  
00005Cr 1  88 00 00 00  
000060r 1  00 00 9B 89  
000064r 1  00 00 00 00  
000068r 1  00 98 8A 00  
00006Cr 1  00 00 00 00  
000070r 1  99 8B 00 00  
000074r 1  00 00 00 9A  
000078r 1  88 00 00 00  
00007Cr 1  00 00 9B 89  
000080r 1  00 00 00 00  
000084r 1  00 98 8A 00  
000088r 1  00 00 00 00  
00008Cr 1  99 8B 00 00  
000090r 1  00 00 00 9A  
000094r 1  00 00 00 00  
000098r 1  00 00 9B     
00009Br 1               
00009Br 1               ; ===============================================================
00009Br 1               ; If DIR_CCW output the required Stepper Pattern
00009Br 1               ; ===============================================================
00009Br 1               
00009Br 1  B1                   oen     DIR_CCW
00009Cr 1  68                   orc     RR
00009Dr 1  8B 00 00 00          pulse_ccw
0000A1r 1  00 00 00 8A  
0000A5r 1  00 00 00 00  
0000A9r 1  00 9B 89 00  
0000ADr 1  00 00 00 00  
0000B1r 1  9A 88 00 00  
0000B5r 1  00 00 00 99  
0000B9r 1  8B 00 00 00  
0000BDr 1  00 00 98 8A  
0000C1r 1  00 00 00 00  
0000C5r 1  00 9B 89 00  
0000C9r 1  00 00 00 00  
0000CDr 1  9A 88 00 00  
0000D1r 1  00 00 00 99  
0000D5r 1  8B 00 00 00  
0000D9r 1  00 00 98 8A  
0000DDr 1  00 00 00 00  
0000E1r 1  00 9B 89 00  
0000E5r 1  00 00 00 00  
0000E9r 1  9A 88 00 00  
0000EDr 1  00 00 00 99  
0000F1r 1  00 00 00 00  
0000F5r 1  00 00 98     
0000F8r 1               
0000F8r 1               ; ===============================================================
0000F8r 1               ; Loop to start
0000F8r 1               ; ===============================================================
0000F8r 1               
0000F8r 1  C0                   jmp
0000F9r 1               
0000F9r 1               
