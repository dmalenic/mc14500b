ca65 V2.18 - Ubuntu 2.19-1
Main file   : ./timer-test.s
Current file: ./timer-test.s

000000r 1               ; ------------------------------------------------------
000000r 1               ; Timer Test:
000000r 1               ; * A running lights program paced by the timer on 2Hz.
000000r 1               ; * It tests Arduino code that emulates a timer between
000000r 1               ;   the output OUT7 and the input IN7.
000000r 1               ; * The output OUT7 transition from LOW to HIGH triggers
000000r 1               ;   the timer.
000000r 1               ; * The timer output is connected to the input IN7.
000000r 1               ; * See `timer_emul.h` for an additional explanation of how
000000r 1               ;   the timer operates and how to control the duration of
000000r 1               ;   a timer pulse.
000000r 1               ; ------------------------------------------------------
000000r 1               ; The timer generates the following output pattern:
000000r 1               ; 1......
000000r 1               ; 11.....
000000r 1               ; 111....
000000r 1               ; 1111...
000000r 1               ; 11111..
000000r 1               ; 111111.
000000r 1               ; 1111111
000000r 1               ; .111111
000000r 1               ; ..11111
000000r 1               ; ...1111
000000r 1               ; ....111
000000r 1               ; .....11
000000r 1               ; ......1
000000r 1               ; .......
000000r 1               ; ------------------------------------------------------
000000r 1               
000000r 1               
000000r 1               .include "system.inc"
000000r 2               ;
000000r 2               ; MC14500 assembler using ca65 macros
000000r 2               ; Yaroslav Veremenko (c) 2022
000000r 2               ;
000000r 2               
000000r 2               .feature ubiquitous_idents
000000r 2               .feature string_escapes
000000r 2               .setcpu "none"
000000r 2               
000000r 2               ; 0000 0: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               ; 0001 1: LD   = Data -> RR
000000r 2               ; 0010 2: LDC  = !Data -> RR
000000r 2               ; 0011 3: AND  = RR * Data -> RR
000000r 2               ; 0100 4: ANDC = RR * !Data -> RR
000000r 2               ; 0101 5: OR   = RR + Data -> RR
000000r 2               ; 0110 6: ORC  = RR + !Data -> RR
000000r 2               ; 0111 7: XNOR = RR == Data -> RR
000000r 2               ; 1000 8: STO  = Store. RR -> Data. Write high if OEN.
000000r 2               ; 1001 9: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2               ; 1010 A: IEN  = Input enable. D -> IEN.
000000r 2               ; 1011 B: OEN  = Output enable. D -> OEN.
000000r 2               ; 1100 C: JMP  = Jump. Jump high.
000000r 2               ; 1101 D: RTN  = Return. RTN high. 1 -> Skip.
000000r 2               ; 1110 E: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2               ; 1111 F: NOPF = No change in registers. RR -> RR. FLGF high.
000000r 2               
000000r 2               .define I_NOP0 0
000000r 2               .define I_LD 1
000000r 2               .define I_LDC 2
000000r 2               .define I_AND 3
000000r 2               .define I_ANDC 4
000000r 2               .define I_OR 5
000000r 2               .define I_ORC 6
000000r 2               .define I_XNOR 7
000000r 2               .define I_STO 8
000000r 2               .define I_STOC 9
000000r 2               .define I_IEN 10
000000r 2               .define I_OEN 11
000000r 2               .define I_JMP 12
000000r 2               .define I_RTN 13
000000r 2               .define I_SKZ 14
000000r 2               .define I_NOPF 15
000000r 2               
000000r 2               RR = $8
000000r 2               IN1 = $9
000000r 2               IN2 = $A
000000r 2               IN3 = $B
000000r 2               IN4 = $C
000000r 2               IN5 = $D
000000r 2               IN6 = $E
000000r 2               IN7 = $F
000000r 2               
000000r 2               MEM0 = $0
000000r 2               MEM1 = $1
000000r 2               MEM2 = $2
000000r 2               MEM3 = $3
000000r 2               MEM4 = $4
000000r 2               MEM5 = $5
000000r 2               MEM6 = $6
000000r 2               MEM7 = $7
000000r 2               
000000r 2               OUT0 = $8
000000r 2               OUT1 = $9
000000r 2               OUT2 = $A
000000r 2               OUT3 = $B
000000r 2               OUT4 = $C
000000r 2               OUT5 = $D
000000r 2               OUT6 = $E
000000r 2               OUT7 = $F
000000r 2               
000000r 2               .macro __lit_instr op, addr
000000r 2                   .if (addr > $0F)
000000r 2                       .error "Address overflow"
000000r 2                   .endif
000000r 2                   .byte <(((op) << 4) | ((<(addr)) & $0F))
000000r 2               .endmacro
000000r 2               
000000r 2               .macro __instr op, addr
000000r 2                   __lit_instr op, addr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro nop0 addr    ; 0000: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               .ifblank    addr
000000r 2                   __instr I_NOP0, 0
000000r 2               .else
000000r 2                   __instr I_NOP0, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro ld addr      ; 0001: LD
000000r 2                   __instr I_LD, addr
000000r 2               .endmacro
000000r 2               .macro ldc addr     ; 0010: LDC
000000r 2                   __instr I_LDC, addr
000000r 2               .endmacro
000000r 2               .macro and addr     ; 0011: AND
000000r 2                   __instr I_AND, addr
000000r 2               .endmacro
000000r 2               .macro andc addr    ; 0100: ANDC
000000r 2                   __instr I_ANDC, addr
000000r 2               .endmacro
000000r 2               .macro or addr      ; 0101: OR
000000r 2                   __instr I_OR, addr
000000r 2               .endmacro
000000r 2               .macro orc addr     ; 0110: ORC
000000r 2                   __instr I_ORC, addr
000000r 2               .endmacro
000000r 2               .macro xnor addr    ; 0111: XNOR
000000r 2                   __instr I_XNOR, addr
000000r 2               .endmacro
000000r 2               .macro sto addr     ; 1000: STO  = Store. RR -> Data. Write high if OEN.
000000r 2                   __instr I_STO, addr
000000r 2               .endmacro
000000r 2               .macro stoc addr    ; 1001: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2                   __instr I_STOC, addr
000000r 2               .endmacro
000000r 2               .macro ien addr     ; 1010: IEN  = Input enable. D -> IEN.
000000r 2                   __instr I_IEN, addr
000000r 2               .endmacro
000000r 2               .macro oen addr     ; 1011: OEN  = Output enable. D -> OEN.
000000r 2                   __instr I_OEN, addr
000000r 2               .endmacro
000000r 2               .macro jmp addr     ; 1100: JMP  = Jump. Jump high.
000000r 2               .ifblank   addr
000000r 2                   __instr I_JMP, 0
000000r 2               .else
000000r 2                   __instr I_JMP, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               .macro rtn          ; 1101: RTN  = Return. RTN high. 1 -> Skip.
000000r 2                   __instr I_RTN, 0
000000r 2               .endmacro
000000r 2               .macro skz          ; 1110: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2                   __instr I_SKZ, 0
000000r 2               .endmacro
000000r 2               .macro nopf addr    ; 1111: NOPF = No change
000000r 2               .ifblank   addr
000000r 2                   __instr I_NOPF, 0
000000r 2               .else
000000r 2                   __instr I_NOPF, addr
000000r 2               .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               TMP    = MEM7
000000r 1               
000000r 1               TIMER_OUT  = IN7
000000r 1               TIMER_TRIG = OUT7
000000r 1               
000000r 1               START = 0
000000r 1               
000000r 1               
000000r 1               .macro trigger_timer
000000r 1                   orc     RR
000000r 1                   sto     TIMER_TRIG
000000r 1                   stoc    TIMER_TRIG
000000r 1               .endmacro
000000r 1               
000000r 1               .segment "CODE"
000000r 1               
000000r 1               ; ------------------------------------------------------
000000r 1               ; initialization
000000r 1               ; if it is the first loop set MEM0 to 1
000000r 1               ; enable inputs and outputs
000000r 1               ; ------------------------------------------------------
000000r 1               
000000r 1  87               sto     TMP         ; store RR to TMP, RR is 0 the first time, and 1 afterwards
000001r 1  68               orc     RR          ; force 1 into RR regardless whether inputs and outputs were enabled
000002r 1  A8               ien     RR          ; enable inputs
000003r 1  B8               oen     RR          ; enable outputs
000004r 1  27               ldc     TMP         ; restore complemented RR
000005r 1  E0               skz                 ; skip next instruction if not the first time
000006r 1  80               sto     MEM0        ; initialize the internal representation of the first LED to 1
000007r 1               
000007r 1               ; ------------------------------------------------------
000007r 1               ; if the timer ON then go to the START
000007r 1               ; ------------------------------------------------------
000007r 1               
000007r 1  1F               ld      TIMER_OUT   ; load timer state
000008r 1  E0               skz                 ; skip next instruction if timer is OFF
000009r 1  C0               jmp     START       ; timer is ON jump to START
00000Ar 1               
00000Ar 1               ; ------------------------------------------------------
00000Ar 1               ; copy internal state to output
00000Ar 1               ; ------------------------------------------------------
00000Ar 1  10 88 11 89  .repeat 7,I
00000Er 1  12 8A 13 8B  
000012r 1  14 8C 15 8D  
000016r 1  16 8E        
000018r 1                   ld      MEM0+I      ; load the internal representation of LED I
000018r 1                   sto     OUT0+I      ; copy to the corresponding output
000018r 1               .endrepeat
000018r 1               
000018r 1               ; ------------------------------------------------------
000018r 1               ; shift internal state to output
000018r 1               ; ------------------------------------------------------
000018r 1               
000018r 1  16               ld      MEM6
000019r 1  97               stoc    TMP
00001Ar 1               
00001Ar 1  15 86 14 85  .repeat 6, I
00001Er 1  13 84 12 83  
000022r 1  11 82 10 81  
000026r 1                   ld      MEM5-I
000026r 1                   sto     MEM6-I
000026r 1               .endrepeat
000026r 1               
000026r 1  17               ld      TMP
000027r 1  80               sto     MEM0
000028r 1               
000028r 1               ; ------------------------------------------------------
000028r 1               ; trigger timer and jump to the beginning of the program
000028r 1               ; ------------------------------------------------------
000028r 1               
000028r 1  68 8F 9F         trigger_timer
00002Br 1               
00002Br 1  C0               jmp     START
00002Cr 1               
00002Cr 1               
